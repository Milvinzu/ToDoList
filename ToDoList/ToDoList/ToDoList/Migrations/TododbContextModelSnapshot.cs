// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ToDoList.Data;

#nullable disable

namespace ToDoList.Migrations
{
    [DbContext(typeof(TododbContext))]
    partial class TododbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("ToDoList.Models.List", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("color");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "user_id");

                    b.ToTable("lists", (string)null);
                });

            modelBuilder.Entity("ToDoList.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool?>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_read")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Message")
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "user_id")
                        .HasDatabaseName("user_id1");

                    b.ToTable("notifications", (string)null);
                });

            modelBuilder.Entity("ToDoList.Models.Recurringtask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("NextOccurrence")
                        .HasColumnType("datetime")
                        .HasColumnName("next_occurrence");

                    b.Property<string>("RecurrenceType")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("recurrence_type");

                    b.Property<int?>("TaskId")
                        .HasColumnType("int")
                        .HasColumnName("task_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "TaskId" }, "task_id");

                    b.ToTable("recurringtasks", (string)null);
                });

            modelBuilder.Entity("ToDoList.Models.Subtask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Completed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("completed")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("TaskId")
                        .HasColumnType("int")
                        .HasColumnName("task_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "TaskId" }, "task_id")
                        .HasDatabaseName("task_id1");

                    b.ToTable("subtasks", (string)null);
                });

            modelBuilder.Entity("ToDoList.Models.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Completed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("completed")
                        .HasDefaultValueSql("'0'");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime")
                        .HasColumnName("due_date");

                    b.Property<int?>("ListId")
                        .HasColumnType("int")
                        .HasColumnName("list_id");

                    b.Property<int?>("Priority")
                        .HasColumnType("int")
                        .HasColumnName("priority");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ListId" }, "list_id");

                    b.HasIndex(new[] { "UserId" }, "user_id")
                        .HasDatabaseName("user_id2");

                    b.ToTable("tasks", (string)null);
                });

            modelBuilder.Entity("ToDoList.Models.Taskattachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FileName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("file_name");

                    b.Property<string>("FileUrl")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("file_url");

                    b.Property<int?>("TaskId")
                        .HasColumnType("int")
                        .HasColumnName("task_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "TaskId" }, "task_id")
                        .HasDatabaseName("task_id2");

                    b.ToTable("taskattachments", (string)null);
                });

            modelBuilder.Entity("ToDoList.Models.Taskcollaborator", b =>
                {
                    b.Property<int>("ListId")
                        .HasColumnType("int")
                        .HasColumnName("list_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("PermissionLevel")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("permission_level");

                    b.HasKey("ListId", "UserId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "UserId" }, "user_id")
                        .HasDatabaseName("user_id3");

                    b.ToTable("taskcollaborators", (string)null);
                });

            modelBuilder.Entity("ToDoList.Models.Taskreminder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ReminderTime")
                        .HasColumnType("datetime")
                        .HasColumnName("reminder_time");

                    b.Property<int?>("TaskId")
                        .HasColumnType("int")
                        .HasColumnName("task_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "TaskId" }, "task_id")
                        .HasDatabaseName("task_id3");

                    b.ToTable("taskreminders", (string)null);
                });

            modelBuilder.Entity("ToDoList.Models.Tasktag", b =>
                {
                    b.Property<int>("TaskId")
                        .HasColumnType("int")
                        .HasColumnName("task_id");

                    b.Property<string>("Tag")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("tag");

                    b.HasKey("TaskId", "Tag")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("tasktags", (string)null);
                });

            modelBuilder.Entity("ToDoList.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password_hash");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("ToDoList.Models.List", b =>
                {
                    b.HasOne("ToDoList.Models.User", "User")
                        .WithMany("Lists")
                        .HasForeignKey("UserId")
                        .HasConstraintName("lists_ibfk_1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ToDoList.Models.Notification", b =>
                {
                    b.HasOne("ToDoList.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .HasConstraintName("notifications_ibfk_1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ToDoList.Models.Recurringtask", b =>
                {
                    b.HasOne("ToDoList.Models.Task", "Task")
                        .WithMany("Recurringtasks")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("recurringtasks_ibfk_1");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("ToDoList.Models.Subtask", b =>
                {
                    b.HasOne("ToDoList.Models.Task", "Task")
                        .WithMany("Subtasks")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("subtasks_ibfk_1");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("ToDoList.Models.Task", b =>
                {
                    b.HasOne("ToDoList.Models.List", "List")
                        .WithMany("Tasks")
                        .HasForeignKey("ListId")
                        .HasConstraintName("tasks_ibfk_1");

                    b.HasOne("ToDoList.Models.User", "User")
                        .WithMany("Tasks")
                        .HasForeignKey("UserId")
                        .HasConstraintName("tasks_ibfk_2");

                    b.Navigation("List");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ToDoList.Models.Taskattachment", b =>
                {
                    b.HasOne("ToDoList.Models.Task", "Task")
                        .WithMany("Taskattachments")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("taskattachments_ibfk_1");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("ToDoList.Models.Taskcollaborator", b =>
                {
                    b.HasOne("ToDoList.Models.List", "List")
                        .WithMany("Taskcollaborators")
                        .HasForeignKey("ListId")
                        .IsRequired()
                        .HasConstraintName("taskcollaborators_ibfk_1");

                    b.HasOne("ToDoList.Models.User", "User")
                        .WithMany("Taskcollaborators")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("taskcollaborators_ibfk_2");

                    b.Navigation("List");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ToDoList.Models.Taskreminder", b =>
                {
                    b.HasOne("ToDoList.Models.Task", "Task")
                        .WithMany("Taskreminders")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("taskreminders_ibfk_1");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("ToDoList.Models.Tasktag", b =>
                {
                    b.HasOne("ToDoList.Models.Task", "Task")
                        .WithMany("Tasktags")
                        .HasForeignKey("TaskId")
                        .IsRequired()
                        .HasConstraintName("tasktags_ibfk_1");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("ToDoList.Models.List", b =>
                {
                    b.Navigation("Taskcollaborators");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("ToDoList.Models.Task", b =>
                {
                    b.Navigation("Recurringtasks");

                    b.Navigation("Subtasks");

                    b.Navigation("Taskattachments");

                    b.Navigation("Taskreminders");

                    b.Navigation("Tasktags");
                });

            modelBuilder.Entity("ToDoList.Models.User", b =>
                {
                    b.Navigation("Lists");

                    b.Navigation("Notifications");

                    b.Navigation("Taskcollaborators");

                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
